{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Binary Tree Operations","text":"<p>This module provides operations for manipulating binary trees.</p>"},{"location":"#type-definition","title":"Type Definition","text":"<pre><code>type 'a bin_tree = Nil | Node of 'a * 'a bin_tree * 'a bin_tree\n</code></pre> <p>Represents a binary tree where each node contains a value of type <code>'a</code> and has two child nodes.</p>"},{"location":"#functions","title":"Functions","text":""},{"location":"#height","title":"<code>height</code>","text":"<pre><code>val height : 'a bin_tree -&gt; int\n</code></pre> <p>Returns the height of the given binary tree.</p>"},{"location":"#nb_leaf","title":"<code>nb_leaf</code>","text":"<pre><code>val nb_leaf : 'a bin_tree -&gt; int\n</code></pre> <p>Returns the number of leaves in the given binary tree.</p>"},{"location":"#nb_internal_nodes","title":"<code>nb_internal_nodes</code>","text":"<pre><code>val nb_internal_nodes : 'a bin_tree -&gt; int\n</code></pre> <p>Returns the number of internal nodes in the given binary tree.</p>"},{"location":"#internal_nodes","title":"<code>internal_nodes</code>","text":"<pre><code>val internal_nodes : 'a bin_tree -&gt; 'a list\n</code></pre> <p>Returns a list of internal nodes in the given binary tree.</p>"},{"location":"#search_node","title":"<code>search_node</code>","text":"<pre><code>val search_node : 'a bin_tree -&gt; 'a -&gt; bool\n</code></pre> <p>Checks if the given value exists in the binary tree.</p>"},{"location":"#is_symmetric","title":"<code>is_symmetric</code>","text":"<pre><code>val is_symmetric : 'a bin_tree -&gt; bool\n</code></pre> <p>Checks if the binary tree is symmetric.</p>"},{"location":"#is_strict","title":"<code>is_strict</code>","text":"<pre><code>val is_strict : 'a bin_tree -&gt; bool\n</code></pre> <p>Checks if the binary tree is strict.</p>"},{"location":"#is_right_comb","title":"<code>is_right_comb</code>","text":"<pre><code>val is_right_comb : 'a bin_tree -&gt; bool\n</code></pre> <p>Checks if the binary tree is a right comb.</p>"},{"location":"#is_left_comb","title":"<code>is_left_comb</code>","text":"<pre><code>val is_left_comb : 'a bin_tree -&gt; bool\n</code></pre> <p>Checks if the binary tree is a left comb.</p>"},{"location":"#is_comb","title":"<code>is_comb</code>","text":"<pre><code>val is_comb : 'a bin_tree -&gt; bool\n</code></pre> <p>Checks if the binary tree is a comb.</p>"},{"location":"#is_perfect","title":"<code>is_perfect</code>","text":"<pre><code>val is_perfect : 'a bin_tree -&gt; bool\n</code></pre> <p>Checks if the binary tree is perfect. ```</p>"}]}